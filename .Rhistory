max(sincerity[1])
max(sincerity[1])
# Estimate item parameters by construct using the grm
sincPars <- mirt(sincerity, 1, "graded", pars='values')
View(sincPars)
forgMod <- mirt(forgiveness, 1, "graded", pars='values')
forgMod
View(forgMod)
summary(fogmod)
summary(fogMod)
forgMod <- mirt(forgiveness, 1, "graded")
summary(forgmod)
summary(forgMod)
coeff(forgMod)
coef(forgMod)
x <- unlist(coef(forgMod))
x
View(forgMod)
as.matrix(fogMod)
as.matrix(forgMod)
?simdata
x <- coef(forgMod)$Aforg1
x
x <- coef(forgMod)$AForg1
x
as.vector(x)
colnames(x)
as.dataframe(coef(forgMod))
as.data.frame(coef(forgMod))
x
cn <- (x)
cn <- colnames(x)
x <- as.data.frame(x)
x
x <- as.data.frame(coef(forgMod))
x
colnames(x) <- cn
x
x <- as.data.frame(coef(forgMod))
ls
x
y <- unlist(x)
y
x <- coef(forgMod)
x
class(x)
names(x)
x$AForg1
as.vector(x$AForg1)
melt(x)
library(reshape2)
melt(x)
depe key == T
depeKey == T
patiKey == T
sincPars <- mirt(sincerity, 1)
x <- coef(sincPars, simplify=T)
x
?mirt
itemplot(sincPars, 1)
?freq
?frequency
table(sincerity[1])
table(sincerity[2])
table(sincerity[3])
table(sincerity[4])
table(sincerity[5])
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
d <- d[test1 & test2,]
d[,244]
colnames(d)
summary(d[244])
describe(d[244])
decribe(d[,244])
describe(d[,244])
max(d[,244])
max(d[,244], na.rm=T)
plot(d[,244])
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 20000
d <- d[test1 & test2,]
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 20000
d <- d[test1 & test2 & test3,]
max(d[,243])
max(d[,244])
d[,244]
mac(d[,244]_
mac(d[,244])
max(d[,244])
max(d[,244], na.rm=T)
describe([,244])
describe(d[,244])
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 18000
d <- d[test1 & test2 & test3,]
describe([,244])
describe([,244])
describe(d[,244])
max(d[,244])
max(d[,244], na.rm=T)
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 10000
d <- d[test1 & test2 & test3,]
max(d[,244], na.rm=T)
describe(d[,244])
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 6000
d <- d[test1 & test2 & test3,]
describe(d[,244])
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 6000 # Around 2 hours
test4 <- d[,"elapse"] > 1037.456 # less than 17.5 minutes
d <- d[test1 & test2 & test3,]
d <- d[test1 & test2 & test3, test4]
d <- d[test1 & test2 & test3 & test4]
d <- d[test1 & test2 & test3 & test4,]
describe(d[,244])
min(d[,244])
min(d[,244], na.rm=T)
max(d[,244])
max(d[,244], na.rm=T)
which(min(d[,244]))
which(d[,244]==0)
d[1,244]
d[34,244]
View(d[,244])
test4 <- d[,"elapse"] > 1037.456
test4
test[34] & test[34] & test[34] & test[34]
test1[34] & test2[34] & test3[34] & test4[34]
utils::View(d)
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 6000 # Around 2 hours
test4 <- d[,"elapse"] > 1037.456 # less than 17.5 minutes
d <- d[test1 & test2 & test3 & test4,]
min(d[,244])
min(d[,244], na.rm=T)
# Remove extra characters from HSinc1 columname
colnames(d)[1] <- "HSinc1"
# Select out constructs to be included and create a vector of keys for
# reverse coded items
sincerity <- d[,1:10]
fairness <- d[,11:20]
anxiety <- d[,61:70]
dependence <- d[,71:80]
liveliness <- d[,111:120]
forgiveness <- d[,121:130]
patience <- d[,151:160]
perfectionism <- d[,181:190]
inquisitiveness <- d[,211:220]
unconventionality <- d[,231:240]
# Define keys for negatively coded variables
# Note: Negative is defined in reference to the construct name,
# Not it's social desirability.
sincKey <- c(2:10)
fairKey <- c(6:10)
anxiKey <- c(6:10)
depeKey <- NULL # All positive items
liveKey <- c(9,10)
forgKey <- c(5:10)
patiKey <- c(6:10)
perfKey <- c(9,10)
inquKey <- c(7:10)
uncoKey <- c(6:10)
# recode and compute factor scores
x <- reverse.specific(sincerity, sincKey, 7) # sincerity
sinc <- rowMeans(x)
x <- reverse.specific(fairness, fairKey, 7) # Fairness
fair <- rowMeans(x) # Fairness
x <- reverse.specific(anxiety, anxiKey, 7) # Anxiety
anxi <- rowMeans(x)
depe <- rowMeans(dependence) # Dependence
x <- reverse.specific(liveliness, liveKey, 7) # Liveliness
live <- rowMeans(x)
x <- reverse.specific(forgiveness, forgKey, 7) # Forgiveness
forg <- rowMeans(x)
x <- reverse.specific(patience, patiKey, 7) # Patience
pati <- rowMeans(x)
x <- reverse.specific(perfectionism, perfKey, 7) # Perfectionism
perf <- rowMeans(x)
x <- reverse.specific(inquisitiveness, inquKey, 7) # Inquisitiveness
inqu <- rowMeans(x)
x <- reverse.specific(unconventionality, uncoKey, 7) # Unconventionality
unco <- rowMeans(x)
# Combine factor scores into a matrix
factors <- cbind(sinc,fair,anxi,depe,live,forg,pati,perf,inqu,unco)
factorcorr <- cor(factors)
# write out correlation matrix
write.table(factorcorr, file="resources/factorcorr.dat")
# Estimate item parameters by construct using the grm
sincPars <- mirt(sincerity, 1)
forgMod <- mirt(forgiveness, 1, "graded")
view[sincerity]
View[sincerity]
sincerity
utils::View(d)
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
colnames(d)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 6000 # Around 2 hours
test4 <- d[,"elapse"] > 1037.456 # less than 17.5 minutes
d <- d[test1 & test2 & test3 & test4,]
colnames(d)
sincerity <- d[,1:10]
fairness <- d[,11:20]
colnames(sincerity)
anxiety <- d[,61:70]
dependence <- d[,71:80]
liveliness <- d[,111:120]
forgiveness <- d[,121:130]
patience <- d[,151:160]
perfectionism <- d[,181:190]
inquisitiveness <- d[,211:220]
unconventionality <- d[,231:240]
colnames(unconventionality)
sincKey <- c(2:10)
fairKey <- c(6:10)
anxiKey <- c(6:10)
depeKey <- NULL # All positive items
liveKey <- c(9,10)
forgKey <- c(5:10)
patiKey <- c(6:10)
perfKey <- c(9,10)
inquKey <- c(7:10)
uncoKey <- c(6:10)
# recode and compute factor scores
x <- reverse.specific(sincerity, sincKey, 7) # sincerity
sinc <- rowMeans(x)
x <- reverse.specific(fairness, fairKey, 7) # Fairness
fair <- rowMeans(x) # Fairness
x <- reverse.specific(anxiety, anxiKey, 7) # Anxiety
anxi <- rowMeans(x)
depe <- rowMeans(dependence) # Dependence
x <- reverse.specific(liveliness, liveKey, 7) # Liveliness
live <- rowMeans(x)
x <- reverse.specific(forgiveness, forgKey, 7) # Forgiveness
forg <- rowMeans(x)
x <- reverse.specific(patience, patiKey, 7) # Patience
pati <- rowMeans(x)
x <- reverse.specific(perfectionism, perfKey, 7) # Perfectionism
perf <- rowMeans(x)
x <- reverse.specific(inquisitiveness, inquKey, 7) # Inquisitiveness
inqu <- rowMeans(x)
x <- reverse.specific(unconventionality, uncoKey, 7) # Unconventionality
unco <- rowMeans(x)
# Combine factor scores into a matrix
factors <- cbind(sinc,fair,anxi,depe,live,forg,pati,perf,inqu,unco)
factorcorr <- cor(factors)
factorcorr
unco
# Combine factor scores into a matrix
factors <- cbind(sinc,fair,anxi,depe,live,forg,pati,perf,inqu,unco)
utils::View(factors)
colnames(factors)
cor(factors)
cor(factors, na.rm=T)
?cor
utils::View(d)
utils::View(d)
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 6000 # Around 2 hours
test4 <- d[,"elapse"] > 1037.456 # less than 17.5 minutes
d <- d[test1 & test2 & test3 & test4]
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 6000 # Around 2 hours
test4 <- d[,"elapse"] > 1037.456 # less than 17.5 minutes
d <- d[test1 & test2 & test3 & test4,]
utils::View(d)
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
### Source Utils
source('E:/Dropbox/R Code/recode.R')
### Load Hexaco data and prepare it for Parameter estimation
setwd("e:/dropbox/dissertation/03 - code")
# Hexaco dataset  downloaded from http://personality-testing.info/_rawdata/
# on 4/18/2016. Imported into SPSS then resaved as an actual .csv
d <- read.csv("data/hexaco.csv", header=T, stringsAsFactors=F)
utils::View(d)
# Find missing country codes and repalce them with NA values
x <- which(d[,243]== " ")
d[x,243] <- NA
rm(x)
# Remove obeservations where respondents reported inadequate
# understanding of instructions or attention
test1 <- d[,"V1"] >= 5
test2 <- d[,"V2"] >= 5
test3 <- d[,"elapse"] < 6000 # Around 2 hours
test4 <- d[,"elapse"] > 1037.456 # less than 17.5 minutes
d <- d[which(test1 & test2 & test3 & test4),]
describe(d)
describe(d[,244])
utils::View(d)
# Remove extra characters from HSinc1 columname
colnames(d)[1] <- "HSinc1"
# Select out constructs to be included and create a vector of keys for
# reverse coded items
sincerity <- d[,1:10]
fairness <- d[,11:20]
anxiety <- d[,61:70]
dependence <- d[,71:80]
liveliness <- d[,111:120]
forgiveness <- d[,121:130]
patience <- d[,151:160]
perfectionism <- d[,181:190]
inquisitiveness <- d[,211:220]
unconventionality <- d[,231:240]
# Define keys for negatively coded variables
# Note: Negative is defined in reference to the construct name,
# Not it's social desirability.
sincKey <- c(2:10)
fairKey <- c(6:10)
anxiKey <- c(6:10)
depeKey <- NULL # All positive items
liveKey <- c(9,10)
forgKey <- c(5:10)
patiKey <- c(6:10)
perfKey <- c(9,10)
inquKey <- c(7:10)
uncoKey <- c(6:10)
# recode and compute factor scores
x <- reverse.specific(sincerity, sincKey, 7) # sincerity
sinc <- rowMeans(x)
x <- reverse.specific(fairness, fairKey, 7) # Fairness
fair <- rowMeans(x) # Fairness
x <- reverse.specific(anxiety, anxiKey, 7) # Anxiety
anxi <- rowMeans(x)
depe <- rowMeans(dependence) # Dependence
x <- reverse.specific(liveliness, liveKey, 7) # Liveliness
live <- rowMeans(x)
x <- reverse.specific(forgiveness, forgKey, 7) # Forgiveness
forg <- rowMeans(x)
x <- reverse.specific(patience, patiKey, 7) # Patience
pati <- rowMeans(x)
x <- reverse.specific(perfectionism, perfKey, 7) # Perfectionism
perf <- rowMeans(x)
x <- reverse.specific(inquisitiveness, inquKey, 7) # Inquisitiveness
inqu <- rowMeans(x)
x <- reverse.specific(unconventionality, uncoKey, 7) # Unconventionality
unco <- rowMeans(x)
# Combine factor scores into a matrix
factors <- cbind(sinc,fair,anxi,depe,live,forg,pati,perf,inqu,unco)
factorcorr <- cor(factors)
factorcorr
# write out correlation matrix
write.table(factorcorr, file="resources/factorcorr.dat")
sincPars <- mirt(sincerity, 1)
itemplot(sincPars,1)
itemplot(sincPars,1)
coef(sincPars, simplify=T)
table(sincerity)
table(sincerity[1])
table(sincerity[1])
table(sincerity[2])
table(sincerity[3])
table(sincerity[4])
table(sincerity[5])
table(sincerity[6])
table(sincerity[7])
table(sincerity[8])
table(sincerity[9])
table(sincerity[10])
x <- apply(d[1:240],2, table)
x
t(x)
x <- t(apply(d[,1:240],2,table))
x
# Write out response option frequencies
write.table(x, file="resources/responsefreq.dat")
